service:
  name: serverless-ws-test
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function # https://github.com/functionalone/serverless-iam-roles-per-function

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  cognito:
    userPoolId: ${env:AWS_APP_COGNITO_USER_POOL_ID, 'unset-cognito-user-pool-id'}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  websocketsApiName: custom-websockets-api-name
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  logs:
    websocket:
      level: ERROR
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REGION: ${self:provider.region}
    USER_POOL_ID: ${self:custom.cognito.userPoolId}
  iamRoleStatements:

functions:
  connect:
    handler: handler.connect
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminListGroupsForUser
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
        Resource: arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.cognito.userPoolId}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        # Restrict our IAM role permissions to the specific table for the stage
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/WSConnections

  disconnect:
    handler: handler.disconnect
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        # Restrict our IAM role permissions to the specific table for the stage
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/WSConnections

  hello:
    handler: handler.hello
    events:
      - websocket:
          route: hello
          routeResponseSelectionExpression: $default

  ping:
    handler: handler.ping
    events:
      - websocket:
          route: ping
          routeResponseSelectionExpression: $default
resources:
  Resources:
    SconnectWebsocketsRoute:
      Type: "AWS::ApiGatewayV2::Route"
      Properties:
        AuthorizationType: "AWS_IAM"
